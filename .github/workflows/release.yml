name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  create-release:
    runs-on: self-hosted
    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
      upload-url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version
        id: get-version
        shell: bash
        run: |
          if [ "$GITHUB_EVENT_NAME" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get-version.outputs.VERSION }}
          release_name: FluidNC GUI ${{ steps.get-version.outputs.VERSION }}
          body: |
            ## Changes in ${{ steps.get-version.outputs.VERSION }}
            
            ### Download
            - **Windows**: Download the `.msi` installer
            - **Linux**: Download the `.deb` or `.rpm` package
            
            ### Installation
            - **Windows**: Run the `.msi` installer and follow the setup wizard
            - **Linux Debian/Ubuntu**: Install with `sudo dpkg -i *.deb`
            - **Linux RPM**: Install with `sudo rpm -i *.rpm`
            
            ### Features
            FluidNC GUI provides an easy-to-use interface for creating and managing FluidNC configurations:
            - Visual configuration wizard
            - Expert YAML editor
            - Pin mapping validation
            - Board-specific templates
            - Real-time validation
            
            Full changelog: https://github.com/eghasemy/FluidNC_GUI/compare/$(git describe --tags --abbrev=0 HEAD~1)...${{ steps.get-version.outputs.VERSION }}
          draft: true
          prerelease: false

  build-linux:
    needs: create-release
    defaults:
      run:
        shell: pwsh
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Tauri dependencies (Ubuntu)
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev build-essential curl wget file libxdo-dev libssl-dev libayatana-appindicator3-dev librsvg2-dev libudev-dev

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            apps/gui/src-tauri/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build packages
        run: pnpm run --filter @fluidnc-gui/core build && pnpm run --filter @fluidnc-gui/presets build

      - name: Build Tauri app
        run: pnpm --filter @fluidnc-gui/gui tauri build

      - name: Find Linux packages
        id: find-packages
        run: |
          DEB_FILE=$(find apps/gui/src-tauri/target/release/bundle/deb -name "*.deb" | head -1)
          RPM_FILE=$(find apps/gui/src-tauri/target/release/bundle/rpm -name "*.rpm" | head -1)
          echo "DEB_PATH=$DEB_FILE" >> $GITHUB_OUTPUT
          echo "RPM_PATH=$RPM_FILE" >> $GITHUB_OUTPUT

      - name: Upload Debian package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload-url }}
          asset_path: ${{ steps.find-packages.outputs.DEB_PATH }}
          asset_name: FluidNC-GUI-Linux-x64.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload RPM package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload-url }}
          asset_path: ${{ steps.find-packages.outputs.RPM_PATH }}
          asset_name: FluidNC-GUI-Linux-x64.rpm
          asset_content_type: application/x-rpm

  finalize-release:
    needs: [create-release, build-linux]
    runs-on: self-hosted
    steps:
      - name: Publish Release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release-id }},
              draft: false
            });
